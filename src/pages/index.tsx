/* antes do server side props era utilizado o useEffect e useState, 
onde dentro do useEffect ia uma fun√ß√£o ass√≠ncrona  que fazia a requisi√ß√£o.
Nesse caso o useEffect substitu√≠a o componentDidMount, e o resultado era 
armazenado no state da applica√ß√£o. 
*/

/*
ServerSideRendering funciona apenas em uma p√°gina.
Se um componente precisar de uma informa√ß√£o server side rendering,
eu preciso importar o componente na p√°gina e repassar a informa√ß√£o como props.
*/

/* Tudo que for retornado como props do getServerSideProps pode ser passado
para a p√°gina como props e acessado na p√°gina no browser,
ou repassado para um componente devidamente importado.
Lembrando que se esta informa√ß√£o for colocada dentro de getServerSideProps
ela n√£o vai aparecer no browser, porque tal fun√ß√£o √© executada s√≥ no server.
 */
import Head from "next/head"
import { SubscribeButton } from "../components/SubscribeButton"
import styles from './home.module.scss'
//import {GetServerSideProps} from "next"
//client side
//Server side
// Static
import {GetStaticProps} from "next"
import {stripe} from '../services/stripe'

interface HomeProps{
// basicamente tenho o objeto descrito na getServerSideProps


product: {
   priceId: string;
   amount: string;
 };


}

//se o product √© do tipo HomeProps ent√£o ele pode receber ter priceId e Amount
// passei o objeto/valor product no lugar da chave props e tipei ele
export default function Home({product}:HomeProps) {

return (
<>

<Head>
<title> Home|Criptam</title>
</Head>

<main className={styles.contentContainer}>

<section className={styles.hero}>
<span> üëè Hey, Welcome </span>
<h1> News about the <span> Criptam </span> world. </h1>
<p>
Buy Cryptam <br/>
<span> for {product.amount} </span>
</p>

<SubscribeButton priceId={product.priceId}/>

</section>
<img src="/images/logo2.png" alt="girl coding"/>

</main>

</>
)
}
/* passou o priceId que veio da api stripe como props para 
o componente <SubscribeButton/> que foi importado. PriceId √© do tipo string
*/
/* GetStaticProps funciona apenas para informa√ß√µes est√°ticas: 

lembra do bem vindo diego aparecendo para todos os usu√°rios. Se for para mudar √© GetServerSidePropos
*/
export const getStaticProps:GetStaticProps = async()=> {

const price = await stripe.prices.retrieve('price_1InLFhIH7ycrfAqNFQuj5bXu',
{ expand:['product'] })

const product = {
   priceId: price.id,
   amount: new Intl.NumberFormat('en-US', {
     style: 'currency',
     currency: 'EUR',
   }).format(price.unit_amount / 100),
 };

 return {
 props: {
    product,
 }, revalidate: 60 * 60 * 24, // 24horas

}

}

// props do return pode ser passado como par√¢metro para a fun√ß√£o do componente
// props funciona como se fosse uma chave
// com o expand product voc√™ consegue buscar todas as informa√ß√µes do produto
// retrieve √© quando busca um pre√ßo apenas
// o getServerSideProps √© executado no servidor node n√£o no browser